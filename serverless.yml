# For full config options, check the docs:
#    docs.serverless.com

service: dcf-dfym2c
plugins: 
  - serverless-offline
# You can pin your service to only deploy with a specific Serverless version
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  region: us-east-1
  runtime: nodejs8.10
  stage: dev
  stageAbbr: d
  pr_prefix: ${self:provider.stageAbbr}cf-${self:provider.stageAbbr}fym2c #d-dev stage, cf - for cloudFormation, dfym2c - project code at dev stage
  # environment:
  #   pr_prefix: "dcf-dfym2c"
    # pr_prefix-: dcf-dfym2c-
    # TABLE_NAME: tableName1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
#   dcf-dfym2c-hello:
#     handler: hello.handler
#     role: arn:aws:iam::520649825970:role/LambdaStandardRole
#   dcf-dfym2c-email_forwarder:
#     handler: email_forwarder.handler
  FYM-post:
    handler: find-the-match-post.handler  #POST
    role: dcfDfym2cFymPostRole
  FYM-delete:
    handler: find-the-match-delete.handler  #DELETE
    role: dcfDfym2cFymDeleteRole
  FYM-get:
    handler: find-the-match-get.handler  #GET
    role: dcfDfym2cFymGetRole
  # FYM-pre-sign-in:
  #   handler: find-the-match-pre-sign-in.handler

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    # events:
    #   # - schedule: cron(45 17 * * ? *)
      # - http:
      #     path: dcf-dfym2c/message/{name}
      #     method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    # dcfDfym2cLambdaInvokePost:
    #   Type: AWS::Lambda::Permission
    #   Properties:
    #     FunctionName:
    #       'Fn::GetAtt':
    #       - FYMDashpostLambdaFunction
    #       - Arn
    #     Action: 'lambda:InvokeFunction'
    #     Principal: 'apigateway.amazonaws.com'
    #     SourceArn:
    #       'Fn::Join':
    #       - ''
    #       -
    #         - 'arn:aws:execute-api:'
    #         - Ref: 'AWS::Region'
    #         - ':'
    #         - Ref: 'AWS::AccountId'
    #         - ':'
    #         - Ref: 'FYMapi'
    #         - '/*/POST/find-your-match'
    # dcfDfym2cLambdaInvokeDelete:
    #   Type: AWS::Lambda::Permission
    #   Properties:
    #     FunctionName:
    #       'Fn::GetAtt':
    #       - FYMDashdeleteLambdaFunction
    #       - Arn
    #     Action: 'lambda:InvokeFunction'
    #     Principal: 'apigateway.amazonaws.com'
    #     SourceArn:
    #       'Fn::Join':
    #       - ''
    #       -
    #         - 'arn:aws:execute-api:'
    #         - Ref: 'AWS::Region'
    #         - ':'
    #         - Ref: 'AWS::AccountId'
    #         - ':'
    #         - Ref: 'FYMapi'
    #         - '/*/DELETE/find-your-match'
    # dcfDfym2cLambdaInvokeGet:
    #   Type: AWS::Lambda::Permission
    #   Properties:
    #     FunctionName:
    #       'Fn::GetAtt':
    #       - FYMDashgetLambdaFunction
    #       - Arn
    #     Action: 'lambda:InvokeFunction'
    #     Principal: 'apigateway.amazonaws.com'
    #     SourceArn:
    #       'Fn::Join':
    #       - ''
    #       -
    #         - 'arn:aws:execute-api:'
    #         - Ref: 'AWS::Region'
    #         - ':'
    #         - Ref: 'AWS::AccountId'
    #         - ':'
    #         - Ref: 'FYMapi'
    #         - '/*/GET/find-your-match'

    #         # arn:aws:execute-api:us-east-2:520649825970:936e6uzs1i/*/POST/
    #         # arn:aws:execute-api:us-east-1:520649825970:9zikrft4kj/*/DELETE/find-your-match

    dcfDfym2cFymPostRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: dcfDfym2cFymPostRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: dcfDfym2cFymPost
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: 
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - dynamodb:PutItem
                  Resource: 
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:dynamodb'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'table/dcf-dfym2c-usersTable'

    dcfDfym2cFymDeleteRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: dcfDfym2cFymDeleteRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: dcfDfym2cFymDelete
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: 
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - dynamodb:DeleteItem
                  Resource: 
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:dynamodb'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'table/dcf-dfym2c-usersTable'
    dcfDfym2cFymGetRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: dcfDfym2cFymGetRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: dcfDfym2cFymGet
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: 
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - dynamodb:GetItem
                    - dynamodb:Scan
                    - dynamodb:Query
                  Resource: 
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:dynamodb'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'table/dcf-dfym2c-usersTable'
    
#     newBucket:
#       Type: AWS::S3::Bucket
#       Properties:
#        BucketName: dcf-dfym2c-misc
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: dcf-dfym2c-usersTable
        AttributeDefinitions:
          - AttributeName: UserID
            AttributeType: S

        KeySchema:
          - AttributeName: UserID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    FYMapi:
      Type: 'AWS::ApiGateway::RestApi'
      Properties:
        Name: FYMapi
        Description: A demo API for FYM
        Body:
          swagger: "2.0"
          info:
            version: "2018-11-15T18:34:04Z"
            title: "find-your-match"
          # host: "edv8edmxxj.execute-api.us-east-1.amazonaws.com"     ####
          # host: "vg0r6otvsg.execute-api.us-east-1.amazonaws.com"
          basePath: "/development"
          schemes:
          - "https"
          paths:
            /find-your-match:
              post:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                parameters:
                - name: "accessToken"
                  in: "query"
                  required: true
                  type: "string"
                - in: "body"
                  name: "candidate"
                  required: true
                  schema:
                    $ref: "#/definitions/candidate"
                responses:
                  '200':
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                security:
                - FYM-Cognito-cognito-authorizer: []
                x-amazon-apigateway-request-validator: "Validate body"
                x-amazon-apigateway-integration:
                  uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:520649825970:function:dcf-dfym2c-dev-FYM-post/invocations"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "#set($inputRoot = $input.path('$'))\n\n{\n    \"id\"\
                      \ : \"$inputRoot.candidate.id\",\n    ## \"id\" : \"$context.authorizer.claims.sub\"\
                      ,\n    \"name\" : \"$inputRoot.candidate.name\",\n    ## \"name\" : \"\
                      $context.authorizer.claims.name\"\n    \"interests\" : \"$inputRoot.candidate.interests\"\
                      ,\n    ## \"interests\" : \"$context.authorizer.claims.interests\"\n \
                      \   \"gender\" : \"$inputRoot.candidate.gender\",\n    ## \"gender\" :\
                      \ \"$context.authorizer.claims.gender\",\n    \"accessToken\" : \"$input.params('accessToken')\"\
                      \n}"
                  passthroughBehavior: "when_no_templates"
                  httpMethod: "POST"
                  contentHandling: "CONVERT_TO_TEXT"
                  type: "aws"
                  # credentials : 
                  #   'Fn::Join':
                  #   - ''
                  #   -
                  #     - 'arn:aws:iam::'
                  #     - Ref: 'AWS::AccountId'
                  #     - ':role/lambda_invoke_function_assume_apigw_role'
              delete:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                parameters:
                - name: "accessToken"
                  in: "query"
                  required: true
                  type: "string"
                - name: "candidateID"
                  in: "query"
                  required: true
                  type: "string"
                responses:
                  '200':
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                security:
                - FYM-Cognito-cognito-authorizer: []
                x-amazon-apigateway-request-validator: "Validate query string parameters and\
                  \ headers"
                x-amazon-apigateway-integration:
                  uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:520649825970:function:dcf-dfym2c-dev-FYM-delete/invocations"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\n    \"accessToken\": \"$util.escapeJavaScript($input.params('accessToken'))\"\
                      ,\n    \"candidateID\": \"$util.escapeJavaScript($input.params('candidateID'))\"\
                      \n\n}"
                  passthroughBehavior: "when_no_templates"
                  httpMethod: "POST"
                  contentHandling: "CONVERT_TO_TEXT"
                  type: "aws"
                  # credentials:
                  #   'Fn::Join':
                  #   - ''
                  #   -
                  #     - 'arn:aws:iam::'
                  #     - Ref: 'FYMapi'
                  #     - ':role/dcfDfym2cLambdaInvoke'
              options:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  '200':
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'DELETE,POST,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
                  type: "mock"
            /find-your-match/{type}:
              get:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                parameters:
                - name: "type"
                  in: "path"
                  required: true
                  type: "string"
                - name: "accessToken"
                  in: "query"
                  required: true
                  type: "string"
                - name: "candidateID"
                  in: "query"
                  required: true
                  type: "string"
                responses:
                  '200':
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                security:
                - FYM-Cognito-cognito-authorizer: []
                x-amazon-apigateway-request-validator: "Validate query string parameters and\
                  \ headers"
                x-amazon-apigateway-integration:
                  uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:520649825970:function:dcf-dfym2c-dev-FYM-get/invocations"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\n    \"accessToken\": \"$util.escapeJavaScript($input.params('accessToken'))\"\
                      ,\n    \"type\": \"$util.escapeJavaScript($input.params('type'))\",\n\
                      \    \"candidateID\": \"$util.escapeJavaScript($input.params('candidateID'))\"\
                      \n\n}"
                  passthroughBehavior: "when_no_templates"
                  httpMethod: "POST"
                  contentHandling: "CONVERT_TO_TEXT"
                  type: "aws"
              options:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  '200':
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
                  type: "mock"
            /start-relations:
              post:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  '200':
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                x-amazon-apigateway-integration:
                  credentials: "arn:aws:iam::520649825970:role/APIGatewayToStepFunctions"
                  uri: "arn:aws:apigateway:us-east-1:states:action/StartExecution"
                  responses:
                    default:
                      statusCode: "200"
                  requestTemplates:
                    application/json: "## #set($inputRoot = $input.path('$')) {\n##     \"a\"\
                      \ : \"$inputRoot.a\",\n##     \"b\" : \"$inputRoot.b\",\n\n{\n    \"input\"\
                      : \"$util.escapeJavaScript($input.json('$'))\",\n    \"stateMachineArn\"\
                      : \"arn:aws:states:us-east-1:520649825970:stateMachine:find-the-match-start-relations-step-functions\"\
                      \n}"
                  passthroughBehavior: "when_no_templates"
                  httpMethod: "POST"
                  type: "aws"
              options:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  '200':
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
                  type: "mock"
          securityDefinitions:
            FYM-Cognito-cognito-authorizer:
              type: "apiKey"
              name: "Authorization"
              in: "header"
              x-amazon-apigateway-authtype: "cognito_user_pools"
              x-amazon-apigateway-authorizer:
                providerARNs:
                - "arn:aws:cognito-idp:us-east-1:520649825970:userpool/us-east-1_6wmO1o7KH"
                type: "cognito_user_pools"
          definitions:
            Empty:
              type: "object"
              title: "Empty Schema"
            candidate:
              type: "object"
              properties:
                id:
                  type: "string"
                name:
                  type: "string"
                gender:
                  type: "string"
                interests:
                  type: "string"
              title: "candidate"
          x-amazon-apigateway-request-validators:
            Validate body:
              validateRequestParameters: false
              validateRequestBody: true
            Validate query string parameters and headers:
              validateRequestParameters: true
              validateRequestBody: false
  Outputs:
    NewOutput:
      Description: "Description for the output"
      Value: "Some output value"

